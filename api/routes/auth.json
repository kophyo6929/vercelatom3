import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jwt';
import pool from '../db.js';

const router = express.Router();

// Login
router.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;

    const result = await pool.query('SELECT * FROM users WHERE username = $1', [username]);
    const user = result.rows[0];

    if (!user || !await bcrypt.compare(password, user.password_hash)) {
      return res.status(401).json({ error: 'Invalid credentials' });
    }

    if (user.banned) {
      return res.status(403).json({ error: 'Account is banned' });
    }

    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, { expiresIn: '7d' });

    res.json({
      token,
      user: {
        id: user.id,
        username: user.username,
        isAdmin: user.is_admin,
        credits: parseFloat(user.credits),
        securityAmount: user.security_amount,
        banned: user.banned
      }
    });
  } catch (error) {
    console.error('Login error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Register
router.post('/register', async (req, res) => {
  try {
    const { username, password, securityAmount } = req.body;

    // Check if user exists
    const existingUser = await pool.query('SELECT id FROM users WHERE username = $1', [username]);
    if (existingUser.rows.length > 0) {
      return res.status(400).json({ error: 'Username already exists' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const result = await pool.query(
      'INSERT INTO users (username, password_hash, security_amount) VALUES ($1, $2, $3) RETURNING *',
      [username, hashedPassword, securityAmount]
    );

    const user = result.rows[0];

    // Add welcome notification
    await pool.query(
      'INSERT INTO notifications (user_id, message) VALUES ($1, $2)',
      [user.id, 'Welcome to the new Atom Point Web!']
    );

    const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, { expiresIn: '7d' });

    res.status(201).json({
      token,
      user: {
        id: user.id,
        username: user.username,
        isAdmin: user.is_admin,
        credits: parseFloat(user.credits),
        securityAmount: user.security_amount,
        banned: user.banned
      }
    });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;
